//Alex Gold, developed November 2022


int LaserState = LOW;                  // The variable that stores the state of the laser beam.
int sensorSensitivity =  -5;            // adjust this value to calibrate sensor. Must be negative
int WaitTime = 5 ;                      // time the motor pauses on a location
int MotorMotionTime = 12;               // time for the motor to move

int LaserPin =  7;                     // Tell the arduino that the laser is on pin 7

int motorPin1 = 8;                     // Use these names for the pin numbers.
int motorPin2 = 9;
int motorPin3 = 10;
int motorPin4 = 11;

int note9 = 0x61;
int note8 = 0x63;
int note7 = 0x64;
int note6 = 0x66;
int note5 = 0x68;
int note4 = 0x70;
int note3 = 0x71;
int note2 = 0x40;
int note1 = 0x47;

//int a, b, c, d, e, f, g, h, i = 0; 
int TRUE = 1;
int FALSE = 0;

void setup() {
  pinMode(8, OUTPUT);                    // Setup for the motor.
  pinMode(9, OUTPUT);
  pinMode(10, OUTPUT);
  pinMode(11, OUTPUT);


  pinMode(LaserPin, OUTPUT);            // Setup for laser.


  pinMode(13, OUTPUT);                  // Setup for status led.
 
  Serial.begin(9600);    //31250              //  Start a serial communication channel for MIDI
}

void loop() {
  fsmLaserHarp();
}

////////////////// FINITE STATE MACHINE //////////////////////

int fsmLaserHarp() {
  static int state = 1;
  // There are 16 states in this state machine:
  // the first 8 go forward through the 9 laser positions, the next 8 work back
  //Serial.println(state);
  
  switch (state) {
    case 1: //start on note 1
      //Serial.println(timer(FALSE));
      if (timer(FALSE) < WaitTime) {  //only detect while laser is on
        turnLaserOn();
        if(detectLaser() == TRUE) {   //note playing logic
          playNote(note1);
        }
        else {
          stopNote(note1);
        }
      }
      
      if (timer(FALSE) > WaitTime) {   //transition logic
        turnLaserOff();
        step1();
        if (timer(FALSE) > (MotorMotionTime + WaitTime)){
        state = 2;                     //allow motor time to move before laser turns on
        timer(TRUE);                    //reset timer
        }
      }
      break;
      
      case 2: //note 2
      if (timer(FALSE) < WaitTime) {  //only detect while laser is on
        turnLaserOn();
        if(detectLaser() == TRUE) {   //note playing logic
          playNote(note2);
        }
        else {
          stopNote(note2);
        }
      }
      
      if (timer(FALSE) > WaitTime) {   //transition logic
        turnLaserOff();
        step2();
        if (timer(FALSE) > (MotorMotionTime + WaitTime)){
        state = 3;                     //allow motor time to move before laser turns on
        timer(TRUE);                   //reset timer
       }
      }
      break;

      case 3: //note 3
      if (timer(FALSE) < WaitTime) {  //only detect while laser is on
        turnLaserOn();
        if(detectLaser() == TRUE) {   //note playing logic
          playNote(note3);
        }
        else {
          stopNote(note3);
        }
      }
      
      if (timer(FALSE) > WaitTime) {   //transition logic
        turnLaserOff();
        step3();
        if (timer(FALSE) > (MotorMotionTime + WaitTime)){
        state = 4;                     //allow motor time to move before laser turns on
        timer(TRUE);                   //reset timer
       }
      }
      break;
      
      case 4: //note 4
      if (timer(FALSE) < WaitTime) {  //only detect while laser is on
        turnLaserOn();
        if(detectLaser() == TRUE) {   //note playing logic
          playNote(note4);
        }
        else {
          stopNote(note4);
        }
      }
      
      if (timer(FALSE) > WaitTime) {   //transition logic
        turnLaserOff();
        step4();
        if (timer(FALSE) > (MotorMotionTime + WaitTime)){
        state = 5;                     //allow motor time to move before laser turns on
        timer(TRUE);                   //reset timer
       }
      }
      break;
      
      case 5: //note 5
      if (timer(FALSE) < WaitTime) {  //only detect while laser is on
        turnLaserOn();
        if(detectLaser() == TRUE) {   //note playing logic
          playNote(note5);
        }
        else {
          stopNote(note5);
        }
      }
      
      if (timer(FALSE) > WaitTime) {   //transition logic
        turnLaserOff();
        step1();
        if (timer(FALSE) > (MotorMotionTime + WaitTime)){
        state = 6;                     //allow motor time to move before laser turns on
        timer(TRUE);                   //reset timer
       }
      }
      break;

      case 6: //note 6
      if (timer(FALSE) < WaitTime) {  //only detect while laser is on
        turnLaserOn();
        if(detectLaser() == TRUE) {   //note playing logic
          playNote(note6);
        }
        else {
          stopNote(note6);
        }
      }
      
      if (timer(FALSE) > WaitTime) {   //transition logic
        turnLaserOff();
        step2();
        if (timer(FALSE) > (MotorMotionTime + WaitTime)){
        state = 7;                     //allow motor time to move before laser turns on
        timer(TRUE);                   //reset timer
       }
      }
      break;

      case 7: //note 7
      if (timer(FALSE) < WaitTime) {  //only detect while laser is on
        turnLaserOn();
        if(detectLaser() == TRUE) {   //note playing logic
          playNote(note7);
        }
        else {
          stopNote(note7);
        }
      }
      
      if (timer(FALSE) > WaitTime) {   //transition logic
        turnLaserOff();
        step3();
        if (timer(FALSE) > (MotorMotionTime + WaitTime)){
        state = 8;                     //allow motor time to move before laser turns on
        timer(TRUE);                   //reset timer
       }
      }
      break;

      case 8: //note 8
      if (timer(FALSE) < WaitTime) {  //only detect while laser is on
        turnLaserOn();
        if(detectLaser() == TRUE) {   //note playing logic
          playNote(note8);
        }
        else {
          stopNote(note8);
        }
      }
      
      if (timer(FALSE) > WaitTime) {   //transition logic
        turnLaserOff();
        step4();
        if (timer(FALSE) > (MotorMotionTime + WaitTime)){
        state = 9;                     //allow motor time to move before laser turns on
        timer(TRUE);                   //reset timer
       }
      }
      break;

      case 9: //note 9
      if (timer(FALSE) < WaitTime) {  //only detect while laser is on
        turnLaserOn();
        if(detectLaser() == TRUE) {   //note playing logic
          playNote(note9);
        }
        else {
          stopNote(note9);
        }
      }
      
      if (timer(FALSE) > WaitTime) {   //transition logic
        turnLaserOff();
        step3();
        if (timer(FALSE) > (MotorMotionTime + WaitTime)){
        state = 10;                     //allow motor time to move before laser turns on
        timer(TRUE);                    //reset timer
       }
      }
      break;

      case 10: //note 8
      if (timer(FALSE) < WaitTime) {  //only detect while laser is on
        turnLaserOn();
        if(detectLaser() == TRUE) {   //note playing logic
          playNote(note8);
        }
        else {
          stopNote(note7);
        }
      }
      
      if (timer(FALSE) > WaitTime) {   //transition logic
        turnLaserOff();
        step2();
        if (timer(FALSE) > (MotorMotionTime + WaitTime)){
        state = 11;                     //allow motor time to move before laser turns on
        timer(TRUE);                   //reset timer
       }
      }
      break;

      case 11: //note 7
      if (timer(FALSE) < WaitTime) {  //only detect while laser is on
        turnLaserOn();
        if(detectLaser() == TRUE) {   //note playing logic
          playNote(note7);
        }
        else {
          stopNote(note7);
        }
      }
      
      if (timer(FALSE) > WaitTime) {   //transition logic
        turnLaserOff();
        step1();
        if (timer(FALSE) > (MotorMotionTime + WaitTime)){
        state = 12;                     //allow motor time to move before laser turns on
        timer(TRUE);                    //reset timer
       }
      }
      break;

      case 12: //note 6
      if (timer(FALSE) < WaitTime) {  //only detect while laser is on
        turnLaserOn();
        if(detectLaser() == TRUE) {   //note playing logic
          playNote(note6);
        }
        else {
          stopNote(note6);
        }
      }
      
      if (timer(FALSE) > WaitTime) {   //transition logic
        turnLaserOff();
        step4();
        if (timer(FALSE) > (MotorMotionTime + WaitTime)){
        state = 13;                     //allow motor time to move before laser turns on
        timer(TRUE);                    //reset timer
       }
      }
      break;

      case 13: //note 5
      if (timer(FALSE) < WaitTime) {  //only detect while laser is on
        turnLaserOn();
        if(detectLaser() == TRUE) {   //note playing logic
          playNote(note5);
        }
        else {
          stopNote(note5);
        }
      }
      
      if (timer(FALSE) > WaitTime) {   //transition logic
        turnLaserOff();
        step3();
        if (timer(FALSE) > (MotorMotionTime + WaitTime)){
        state = 14;                     //allow motor time to move before laser turns on
        timer(TRUE);                    //reset timer
       }
      }
      break;

      case 14: //note 4
      if (timer(FALSE) < WaitTime) {  //only detect while laser is on
        turnLaserOn();
        if(detectLaser() == TRUE) {   //note playing logic
          playNote(note4);
        }
        else {
          stopNote(note4);
        }
      }
      
      if (timer(FALSE) > WaitTime) {   //transition logic
        turnLaserOff();
        step2();
        if (timer(FALSE) > (MotorMotionTime + WaitTime)){
        state = 15;                     //allow motor time to move before laser turns on
        timer(TRUE);                    //reset timer
       }
      }
      break;

      case 15: //note 3
      if (timer(FALSE) < WaitTime) {  //only detect while laser is on
        turnLaserOn();
        if(detectLaser() == TRUE) {   //note playing logic
          playNote(note3);
        }
        else {
          stopNote(note3);
        }
      }
      
      if (timer(FALSE) > WaitTime) {   //transition logic
        turnLaserOff();
        step1();
        if (timer(FALSE) > (MotorMotionTime + WaitTime)){
        state = 16;                     //allow motor time to move before laser turns on
        timer(TRUE);                    //reset timer
       }
      }
      break;

      case 16: //note 2
      if (timer(FALSE) < WaitTime) {  //only detect while laser is on
        turnLaserOn();
        if(detectLaser() == TRUE) {   //note playing logic
          playNote(note2);
        }
        else {
          stopNote(note2);
        }
      }
      
      if (timer(FALSE) > WaitTime) {   //transition logic
        turnLaserOff();
        step4();
        if (timer(FALSE) > (MotorMotionTime + WaitTime)){
        state = 1;                     //allow motor time to move before laser turns on
        timer(TRUE);                    //reset timer
       }
      }
      break;
  }
  return(state);
}


//////////////////////// FUNCTIONS ///////////////////////////

void turnLaserOn(){                          //function to turn on laser
  digitalWrite(LaserPin, HIGH);
}

void turnLaserOff(){                         //function to turn off laser
  digitalWrite(LaserPin, LOW);
}

void turnLedOn(){                           //function to turn on indicator LED
  digitalWrite(13, HIGH);
}
void turnLedOff(){                          //function to turn off indicator LED
  digitalWrite(13, LOW);
}

void step1(){                                //stepper motor movement functions
  digitalWrite(motorPin1, HIGH);
  digitalWrite(motorPin2, LOW);
  digitalWrite(motorPin3, LOW);
  digitalWrite(motorPin4, LOW);
}

void step2(){
  digitalWrite(motorPin1, LOW);
  digitalWrite(motorPin2, HIGH);
  digitalWrite(motorPin3, LOW);
  digitalWrite(motorPin4, LOW);
}

void step3(){
  digitalWrite(motorPin1, LOW);
  digitalWrite(motorPin2, LOW);
  digitalWrite(motorPin3, HIGH);
  digitalWrite(motorPin4, LOW);
}

void step4(){
  digitalWrite(motorPin1, LOW);
  digitalWrite(motorPin2, LOW);
  digitalWrite(motorPin3, LOW);
  digitalWrite(motorPin4, HIGH);
}

void playNote(int note){                          //function to start playing note
  noteOn(0x90, note, 0x7F);
  digitalWrite(13, HIGH);
}

void stopNote(int note){                          //function stop playing note
  noteOn(0x90, note, 0x00);
  digitalWrite(13, LOW);
}

/*int detectLaser(){                                //function to detect laser
  Serial.println(( 5.0 * ( (float) analogRead(0) ) / 1024.0 ));
  if(analogRead(0) > sensor){
    return TRUE;
  }
  else {
    return FALSE;
  }
}*/

int detectLaser() {
  static float ambient_light = getPinVoltage(0);
  
  float light = getPinVoltage(0);
  float percent_change = 100*(light-ambient_light)/light;
  Serial.println(percent_change);
  if ( percent_change < sensorSensitivity ) { 
  //if (light > sensor) {  
    return TRUE;
  }
  else {
    return FALSE;
  }  
}

void noteOn(int cmd, int pitch, int velocity)     // Function to play the notes
{
  //Serial.write(cmd);
  //Serial.write(pitch);
  //Serial.write(velocity);
}

long timer(int reset) {                           // function that runs timer
        static unsigned long startTime = millis();
        unsigned long currentTime;
        if (reset==TRUE) {
          startTime = millis();
        }
        currentTime = millis() - startTime;
        return( (long) currentTime );
      }

 float getPinVoltage(int pin) {
  return( 5.0 * ( (float) analogRead(pin) ) / 1024.0 );
}
